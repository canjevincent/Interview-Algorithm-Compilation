1) EASY (5-10 mins) Define a function/method named F that accepts a positive integer argument N.
The function should print numbers 1 to N, each in a new line but with the following rules:
If the number is divisible by 3, print "EDI" instead of the number.
If the number is divisible by 5, print "WOW" instead of the number.
If the number is divisible by both 3 and 5, print "EDIWOW" instead of the number.
Example:
Sample call:
F(17)
Output:
1
2
EDI
4
WOW
EDI
7
8
EDI
WOW
11
EDI
13
14
EDIWOW
16
17

1.1) Given a non-empty array of integers, return the result of multiplying the values together in order. Example:

Example:
[1, 2, 3, 4] => 1 * 2 * 3 * 4 = 24

1.2) Write a function that takes a range of number as a parameter and checks whether the number is prime or not.

Example:
True 11 A Prime
True 13 A Prime
False 16 Not A Prime
True 17 A Prime
True 97 A Prime

Prime from 1 ~ 100
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97

1.3) Write a function that will compute the top 4 numbers on the list.

Example:
Input [7, 10, 3, 8, 5, 6, 1, 4, 9, 2]
Output [10,9,8,7] = 34

1.4) Write a function that will check if the set of list is a palindrome

Example:
Input ["eevee","stephen","adada","alala","garner","ramboo","ambolox","erere","edede","molgren"]
Output True, False, True, True, False, False, False, True, True, False

2) EASY (5-15mins) The Fibonacci sequence is a series of numbers where a number is the sum of the two numbers before it. Starting with 0 and 1, the sequence goes 0, 1, 1, 2, 3, 5, 8, ...
Define a function/method named FIB that accepts a positive integer argument N. The function should print the first N fibonacci numbers (starting from 0 and 1)
Example:
Sample call:
FIB(10)
Output:
0
1
1
2
3
5
8
13
21
34

1.2) Write a function that takes a single string (word) as argument. The function must return an ordered list containing the indexes of all capital letters in the string.

Example:
Test.assertSimilar( capitals('CodEWaRs'), [0,3,4,6] );


3) MODERATE (10-20mins) Define a function/method named NONREPEATING that accepts a string argument s, and prints the first non-repeated character in the string argument. You may use any data structure you find appropriate.
If all characters appear more than once in the string, print "IS A GIANT NUT"
Example:
Sample call:
NONREPEATING("PARTICIPATE")
Output:
R
Sample:
NONREPEATING("COCONUT")
Output:
N
Input:
NONREPEATING("COCONUTNUT")
Output:
IS A GIANT NUT

4) MODERATE (10-20mins) Define a function/method named PRINTDIAMOND that prints a hollow diamond with size N uses asterisks [*]. Where N, an odd number, is the number of asterisks from top to left corners of the diamond.
Assumption: asterisk and space has the same width (monospaced).
Sample:
PRINTDIAMOND(5)
Output:
    *
    
     
      
       
      
     
    
    *

4.5) Write a function that takes a single string as argument. find the longest repetitive sequence in a string.
Example:
Sample call:
REPETITIVE("abbbbcddeeeeee")
Output:
eeeeee
Sample call:
REPETITIVE("1010100111111111101010101001111110101000111111100")
Output:
1111111111

5) HARD (20-30mins) Two strings are said to be anagrams of each other if they both contain the same characters with the same counts/frequencies.
e.g. 
UPSET and SETUP are anagrams
FRUITS and BASKET are not anagrams
UPSET and PUSEEEEEET are not anagrams

From the last example, if we delete 5 E's from PUSEEEEEET, we will get PUSET, which is an anagram of UPSET.

Define a function/method named DELANAGRAM that accepts two string arguments and prints the minimum total number of characters that can be deleted so that the two strings are anagrams of each other.

Sample:
DELANAGRAM("BREAD", "GRIDDLE")
Output:
6
Explanation:
Delete B and A in BREAD
Delete G, I, D and L in GRIDDLE
You'll get RED and RDE which are anagrams of each other
Total deleted: 2 + 4 = 6

Sample:
DELANAGRAM("SADDERD", "DREADSS")
Output:
2
Explanation:
Delete D in SADDERD
Delete S in DREADSS
You'll get SADDER and DREADS which are anagrams of each other
Total deleted: 1 + 1 = 2

Sample:
DELANAGRAM("SETUP", "UPSET")
Output:
0
Explanation:
No need to delete, since they are already anagrams

Sample:
DELANAGRAM("XYZ", "ABC")
Output:
6
Explanation:
"" and "" are anagrams of each other

6) HARD (30-45mins) A string is said to be a palindrome if it reads the same forwards and backwards. e.g. KAYAK, RACECAR
BAYABAS is not a palindrome, but if we delete the last 2 letters, we will get BAYAB, which is a palindrome.
Define a function DELPALINDROME that accepts a string argument S and prints out the minimum number of characters that can be deleted to make the string a palindrome.

Sample:
DELPALINDROME("BARYABAS")
Output:
3
Explanation:
Delete R, and the last 2 letters AS to get BAYAB
(or Delete Y and the last 2 letters AS to get BARAB)

Sample:
DELPALINDROME("RACECAR")
Output:
0
Explanation:
Already a palindrome

Sample:
DELPALINDROME("COLA")
Output:
3
Explanation:
Delete any 3 letters to get a 1-character string, which by definition, is a palindrome.

7) VERY HARD
You are going to be given an array of integers. Your job is to take that array and find an index N where the sum of the integers to the left of N is equal to the sum of the integers to the right of N. If there is no index that would make this happen, return -1.

For example:

Let's say you are given the array {1,2,3,4,3,2,1}:
Your function will return the index 3, because at the 3rd position of the array, the sum of left side of the index ({1,2,3}) and the sum of the right side of the index ({3,2,1}) both equal 6.

Let's look at another one.
You are given the array {1,100,50,-51,1,1}:
Your function will return the index 1, because at the 1st position of the array, the sum of left side of the index ({1}) and the sum of the right side of the index ({50,-51,1,1}) both equal 1.

Last one:
You are given the array {20,10,-80,10,10,15,35} 
At index 0 the left side is {}
The right side is {10,-80,10,10,15,35,20}
They both are equal to 0 when added. (Empty arrays are equal to 0 in this problem)
Index 0 is the place where the left side and right side are equal.

Note: Please remember that in most programming/scripting languages the index of an array starts at 0.

Input:
An integer array of length 0 < arr < 1000. The numbers in the array can be any integer positive or negative.

Output:
The lowest index N where the side to the left of N is equal to the side to the right of N. If you do not find an index that fits these rules, then you will return -1.

Note:
If you are given an array with multiple answers, return the lowest correct index.

8)

Given an array of integers, find the one that appears an odd number of times.

There will always be only one integer that appears an odd number of times.

Examples

[7] should return 7, because it occurs 1 time (which is odd).
[0] should return 0, because it occurs 1 time (which is odd).
[1,1,2] should return 2, because it occurs 1 time (which is odd).
[0,1,0,1,0] should return 0, because it occurs 3 times (which is odd).
[1,2,2,3,3,3,4,3,3,3,2,2,1] should return 4, because it appears 1 time (which is odd).

find_it([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]) should return 5 (because it appears 3 times)
find_it([1,1,2,-2,5,2,4,4,-1,-2,5]) should return -1 (because it appears 1 time)
find_it([20,1,1,2,2,3,3,5,5,4,20,4,5]) should return 5 (because it appears 3 times)
find_it([10]) should return 10 (because it appears 1 time)
find_it([10, 10, 10]) should return 10 (because it appears 3 times)
find_it([1,1,1,1,1,1,10,1,1,1,1]) should return 10 (because it appears 1 time)
find_it([5,4,3,2,1,5,4,3,2,10,10]) should return 1 (because it appears 1 time)

9)

Write a function that takes an array of numbers (integers for the tests) and a target number. It should find two different items in the array that, when added together, give the target value. The indices of these items should then be returned in a tuple / list (depending on your language) like so: (index1, index2).

For the purposes of this kata, some tests may have multiple answers; any valid solutions will be accepted.

The input will always be valid (numbers will be an array of length 2 or greater, and all of the items will be numbers; target will always be the sum of two different items from that array).

Examples

two_sum([1, 2, 3], 4) # returns [0, 2] or [2, 0]

test.assert_equals(sorted(two_sum([1,2,3], 4)), [0,2])
test.assert_equals(sorted(two_sum([1234,5678,9012], 14690)), [1,2])
test.assert_equals(sorted(two_sum([2,2,3], 4)), [0,1])

10)

The first input array is the key to the correct answers to an exam, like ["a", "a", "b", "d"]. The second one contains a student's submitted answers.

The two arrays are not empty and are the same length. Return the score for this array of answers, giving +4 for each correct answer, -1 for each incorrect answer, and +0 for each blank answer, represented as an empty string (in C the space character is used).

If the score < 0, return 0.

Examples

checkExam(["a", "a", "b", "b"], ["a", "c", "b", "d"]) → 6
checkExam(["a", "a", "c", "b"], ["a", "a", "b",  ""]) → 7
checkExam(["a", "a", "b", "c"], ["a", "a", "b", "c"]) → 16
checkExam(["b", "c", "b", "a"], ["",  "a", "a", "c"]) → 0

11)

Your job is to write a function which increments a string, to create a new string.

If the string already ends with a number, the number should be incremented by 1.
If the string does not end with a number. the number 1 should be appended to the new string.
Examples:

foo -> foo1

foobar23 -> foobar24

foo0042 -> foo0043

foo9 -> foo10

foo099 -> foo100

test.assert_equals(increment_string("foo"), "foo1")
test.assert_equals(increment_string("foobar001"), "foobar002")
test.assert_equals(increment_string("foobar1"), "foobar2")
test.assert_equals(increment_string("foobar00"), "foobar01")
test.assert_equals(increment_string("foobar99"), "foobar100")
test.assert_equals(increment_string("foobar099"), "foobar100")
test.assert_equals(increment_string("fo99obar99"), "fo99obar100")
test.assert_equals(increment_string(""), "1")

11.1)

Have the function MissingDigit(str) take the str parameter, which will be a simple mathematical formula with
three numbers, a single operator (+,-,*, or /) and an equal sign(=) and return the digit that completes the 
equation, there will be an x character, and your program should determine what digit is missing. for example,
if str is "3x + 12 = 46" then your program should output 4. The x character can appear in any of the three
numbers and all three numbers will be greater than or equal to 0 and less than or equal to 1000000.

Input: "4 - 2 = x"
Output: 2

Input: "1x0 * 12 = 1200"
Output: 0

11.2)

Have the function StringChallenge(str) take the str parameter being passed and return the smalles number you can get
through the following reduction method. The method is: only the letters a, b, and c will be given in str and you must take
two different adjacent characters and replace it with the third, For example "ac" can be replaced with "b" but "aa" cannot be
replaced with anything. This method is done repeatedly until the string cannot be futher reduced, and the length of the resulting
string is to be outputted.

Input: "abcabc"
Output: 2

Input: "cccc"
Output: 4

10)

Count the number of Duplicates
Write a function that will return the count of distinct case-insensitive alphabetic characters and numeric digits that occur more than once in the input string. The input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.

Examples:

"abcde" -> 0 # no characters repeats more than once
"aabbcde" -> 2 # 'a' and 'b'
"aabBcde" -> 2 # 'a' occurs twice and 'b' twice (`b` and `B`)
"indivisibility" -> 1 # 'i' occurs six times
"Indivisibilities" -> 2 # 'i' occurs seven times and 's' occurs twice
"aA11" -> 2 # 'a' and '1'
"ABBA" -> 2 # 'A' and 'B' each occur twice

11) Your task, is to create N×N multiplication table, of size provided in parameter.

For example, when given size is 3:

1 2 3
2 4 6
3 6 9

For the given example, the return value should be:

[[1,2,3],[2,4,6],[3,6,9]]

12) Given a string S, return the "reversed" string where all characters that are not a letter stay in the same place, and all letters reverse their positions.

Examples:

Input: "ab-cd"
Output: "dc-ba"

Input: "a-bC-dEf=ghIj!!"
Output: "j-Ih-gfE=dCba!!"

13) Longest Subarray having sum of elements atmost ‘k’ 

Find all the subarrays whose sum is less than or equal to k and return the one with the largest length.

Input : arr[] = {1, 2, 1, 0, 1, 1, 0}, k = 4
Output : 5
Explanation:
 {1, 2, 1} => sum = 4, length = 3
 {1, 2, 1, 0}, {2, 1, 0, 1} => sum = 4, length = 4
 {1, 0, 1, 1, 0} =>5 sum = 3, length = 5

 Method 1 (Brute Force): Find all the subarrays whose sum is less than or equal to k and return the one with the largest length. 

 Time Complexity : O(n^2) 
 Auxiliary space: O(1)

 Method 2 (Efficient): An efficient approach is to use the sliding window technique. 

 Traverse the array and check if on adding the current element its sum is less than or equal to k.
 If it’s less than k then add it to the sum and increase the count.
 Keep track of Maximum count.

 14) Find maximum (or minimum) sum of a subarray of size k

Given an array of integers and a number k, find the maximum sum of a subarray of size k. 

Examples: 

Input  : arr[] = {100, 200, 300, 400},  k = 2
Output : 700

Input  : arr[] = {1, 4, 2, 10, 23, 3, 1, 0, 20}, k = 4 
Output : 39
Explanation: We get maximum sum by adding subarray {4, 2, 10, 23} of size 4.

15) Number of subarrays having sum less than K 

Given an array of non-negative numbers and a non-negative number k, find the number of subarrays having sum less than k. We may assume that there is no overflow.

Examples :  

Input : arr[] = {2, 5, 6}
        K = 10
Output : 4
The subarrays are {2}, {5}, {6} and
{2, 5},

Input : arr[] = {1, 11, 2, 3, 15}
        K = 10
Output : 4
{1}, {2}, {3} and {2, 3}

16) Number of subarrays having sum in a given range

Given an array arr[] of positive integers and a range (L, R). Find the number of subarrays having sum in the range L to R.

Input : arr[] = {1, 4, 6}, L = 3, R = 8
Output : 3
The subarrays are {1, 4}, {4}, {6}.

Input : arr[] = {2, 3, 5, 8}, L = 4, R = 13
Output : 6
The subarrays are {2, 3}, {2, 3, 5}, {3, 5},
{5}, {5, 8}, {8}.

17) First subarray having sum at least half the maximum sum of any subarray of size K

Given an array arr[] and an integer K, the task is to find the first subarray which has a sum greater than or equal to half of the maximum possible sum from any subarray of size K.

Input: arr[] = {2, 4, 5, 1, 4, 6, 6, 2, 1, 0}, K = 3 
Output: 6 2 1 
Explanation: 
The given array has a maximum possible sum from any subarray of size K is 16 from the subarray {4, 6, 6}. 
So, the required subarray sum should be greater than or equal to 8 
{6, 2, 1} is the first subarray which has a sum of 9 which is greater than 8.

Input: arr[] = {12, 45, 11, 10, 8, 56, 2}, K = 4 
Output: 45 11 10

18) Count negative elements present in every K-length subarray

Given an array arr[] of size N and an integer K, the task is to count the number of negative elements present in all K-length subarrays.

Example:

Input: arr[] = {-1, 2, -2, 3, 5, -7, -5}, K = 3
Output: 2 1 1 1 2
Explanation: 
First Subarray: {-1, 2, -2}. Count of negative numbers = 2.
Second Subarray: {2, -2, 3}. Count of negative numbers = 1.
Third Subarray: {-2, 3, 5}. Count of negative numbers = 1.
Fourth Subarray: {3, 5, -7}. Count of negative numbers = 1.
Fifth Subarray: {5, -7, -5}. Count of negative numbers = 2.

Input: arr[] = {-1, 2, 4, 4}, K = 2
Output: 1 0 0

19) Sum of minimum and maximum elements of all subarrays of size k.

Given an array of both positive and negative integers, the task is to compute sum of minimum and maximum elements of all sub-array of size k.

Input : arr[] = {2, 5, -1, 7, -3, -1, -2}  
        K = 4
Output : 18
Explanation : Subarrays of size 4 are : 
     {2, 5, -1, 7},   min + max = -1 + 7 = 6
     {5, -1, 7, -3},  min + max = -3 + 7 = 4      
     {-1, 7, -3, -1}, min + max = -3 + 7 = 4
     {7, -3, -1, -2}, min + max = -3 + 7 = 4   
     
     Missing sub arrays - 
     
     {2, -1, 7, -3}
     {2, 7, -3, -1}
     {2, -3, -1, -2}
     {5, 7, -3, -1}
     {5, -3, -1, -2}
     and few more -- why these were not considered??
     Considering missing arrays result coming as 27
     
     Sum of all min & max = 6 + 4 + 4 + 4 
     
                          = 18     

20) Maximum sum two non-overlapping subarrays of given size
https://www.geeksforgeeks.org/maximum-sum-two-non-overlapping-subarrays-of-given-size/

Given an array, we need to find two subarrays with a specific length K such that sum of these subarrays is maximum among all possible choices of subarrays. 

Examples: 

Input : arr[] = [2, 5, 1, 2, 7, 3, 0]
        K = 2
Output : 2 5
         7 3
We can choose two arrays of maximum sum
as [2, 5] and [7, 3], the sum of these two 
subarrays is maximum among all possible 
choices of subarrays of length 2.

Input : arr[] = {10, 1, 3, 15, 30, 40, 4, 50, 2, 1}
        K = 3
Output : 3 15 30 
         40 4 50 

21) A. Given an array A of N integers, write a function missing_int(A) that returns the smallest positive integer (greater than 0) that does not occur in A.

  ○ A = [1, 3, 6, 4, 1, 2] should return 5
  ○ A = [1, 2, 3] should return 4
  ○ A = [-1, -1, -1, -5] should return 1
  ○ A = [1, 3, 6, 4, 1, 7, 8, 10] should return 2

22) B. Write a function find_divisible(a, b, k) that accepts three integers: a, b and k, and returns the count of the numbers between a and b that are divisible by k

  ○ find_divisible(6,11,2) should return 3
  ○ find_divisible(0,11,2) should return 6

23) C. Write a rotate(A, k) function which returns a rotated array A, k times; that is, each element of A will be shifted to the right k times

  ○ rotate([3, 8, 9, 7, 6], 3) returns [9, 7, 6, 3, 8]
  ○ rotate([0, 0, 0], 1) returns [0, 0, 0]
  ○ rotate([1, 2, 3, 4], 4) returns [1, 2, 3, 4]

# LIST COMPREHENSION QUESTIONS

1. Find all of the numbers from 1–1000 that are divisible by 8
q1_answer = [num for num in nums if num % 8 == 0]

2. Find all of the numbers from 1–1000 that have a 6 in them
q2_answer = [num for num in nums if "6" in str(num)]

3. Count the number of spaces in a string
q3_answer = len([char for char in string if char == " "])

4. Remove all of the vowels in a string
q4_answer = "".join([char for char in string if char not in ["a","e","i","o","u"]])

5. Find all of the words in a string that are less than 5 letters
words = string.split(" ")
q5_answer = [word for word in words if len(word) < 5]

6. Use a dictionary comprehension to count the length of each word in a sentence
q6_answer = {word:len(word) for word in words}

7. Use a nested list comprehension to find all of the numbers from 1–1000 that are divisible by any single digit besides 1 (2–9)
q7_answer = [num for num in nums if True in [True for divisor in range(2,10) if num % divisor == 0]]

8. For all the numbers 1–1000, use a nested list/dictionary comprehension to find the highest single digit any of the numbers is divisible by
q8_answer = {num:max([divisor for divisor in range(1,10) if num % divisor == 0]) for num in nums}

