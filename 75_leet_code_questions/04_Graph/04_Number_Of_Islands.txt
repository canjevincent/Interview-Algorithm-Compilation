# --GRAPH--

# Number Of Islands
# Link : https://leetcode.com/problems/number-of-islands/solutions/583745/python-3-solutions-dfs-bfs-union-find-concise-clean/

# Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

# An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

# Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

# Python Simple DFS Solution

# Iterate through each of the cell and if it is an island, do dfs to mark all adjacent islands, then increase the counter by 1.

def numIslands(self, grid):
    if not grid:
        return 0
        
    count = 0
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == '1':
                self.dfs(grid, i, j)
                count += 1
    return count

def dfs(self, grid, i, j):
    if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != '1':
        return
    grid[i][j] = '#'
    self.dfs(grid, i+1, j)
    self.dfs(grid, i-1, j)
    self.dfs(grid, i, j+1)
    self.dfs(grid, i, j-1)

# 7 lines Python

# Sink and count the islands.

# Python Solution

def numIslands(self, grid):
    def sink(i, j):
        if 0 <= i < len(grid) and 0 <= j < len(grid[i]) and grid[i][j] == '1':
            grid[i][j] = '0'
            map(sink, (i+1, i-1, i, i), (j, j, j+1, j-1))
            return 1
        return 0
    return sum(sink(i, j) for i in range(len(grid)) for j in range(len(grid[i])))

# [Python] 3 solutions: DFS, BFS, Union-Find - Concise & Clean

✔️ Solution 1: DFS

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m, n = len(grid), len(grid[0])
        DIR = [0, 1, 0, -1, 0]
        
        def dfs(r, c):
            if r < 0 or r == m or c < 0 or c == n or grid[r][c] == "0": return 0
            grid[r][c] = "0"  # Mark as visited
            for i in range(4):
                dfs(r + DIR[i], c + DIR[i+1])
            return 1
        
        ans = 0
        for r in range(m):
            for c in range(n):
                ans += dfs(r, c)
        return ans

# Complexity

Time: O(M*N), where M <= 300 is number of rows, N <= 300 is number of columns in the matrix.
Space: O(M*N)

✔️ Solution 2: BFS

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m, n = len(grid), len(grid[0])
        DIR = [0, 1, 0, -1, 0]
    
        def bfs(r, c):
            if grid[r][c] == "0": return 0
            q = deque([(r, c)])
            while q:
                r, c = q.popleft()
                for i in range(4):
                    nr, nc = r + DIR[i], c + DIR[i+1]
                    if nr < 0 or nr == m or nc < 0 or nc == n or grid[nr][nc] == "0": continue
                    grid[nr][nc] = "0"  # Mark as visited
                    q.append([nr, nc])
            return 1
    
        ans = 0
        for r in range(m):
            for c in range(n):
                ans += bfs(r, c)
        return ans

# Complexity

Time: O(M*N), where M <= 300 is number of rows, N <= 300 is number of columns in the matrix.
Space: O(M*N)

✔️ Solution 3a: Union-Find (Naive)

class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        
    def find(self, u):
        while u != self.parent[u]:
            u = self.parent[u]
        return u
    
    def union(self, u, v):
        pu, pv = self.find(u), self.find(v)
        if pu == pv: return False
        self.parent[pu] = pv
        return True

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        DIR = [0, 1, 0, -1, 0]
        m, n = len(grid), len(grid[0])
        uf = UnionFind(m*n)
        
        component = 0
        for r in range(m):
            for c in range(n):
                if grid[r][c] == "0": continue
                component += 1
                curId = r * n + c
                for i in range(4):
                    nr, nc = r + DIR[i], c + DIR[i+1]
                    if nr < 0 or nr == m or nc < 0 or nc == n or grid[nr][nc] == "0": continue
                    neiId = nr * n + nc
                    if uf.union(curId, neiId):
                        component -= 1
        return component

# Complexity

Time: O(MN^2), where M <= 300 is number of rows, N <= 300 is number of columns in the matrix.
Space: O(M*N)

✔️ Solution 3b: Union-Find (Path Compression)

class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        
    def find(self, u):
        if u != self.parent[u]:
            self.parent[u] = self.find(self.parent[u])  # Path compression
        return self.parent[u]
    
    def union(self, u, v):
        pu, pv = self.find(u), self.find(v)
        if pu == pv: return False
        self.parent[pu] = pv
        return True

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        DIR = [0, 1, 0, -1, 0]
        m, n = len(grid), len(grid[0])
        uf = UnionFind(m*n)
        
        component = 0
        for r in range(m):
            for c in range(n):
                if grid[r][c] == "0": continue
                component += 1
                curId = r * n + c
                for i in range(4):
                    nr, nc = r + DIR[i], c + DIR[i+1]
                    if nr < 0 or nr == m or nc < 0 or nc == n or grid[nr][nc] == "0": continue
                    neiId = nr * n + nc
                    if uf.union(curId, neiId):
                        component -= 1
        return component

# Complexity

Time: O(MN * logMN), where M <= 300 is number of rows, N <= 300 is number of columns in the matrix.
Space: O(M*N)

✔️ Solution 3c: Union-Find (Path Compression & Union by Size)

class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.size = [1] * n
        
    def find(self, u):
        if u != self.parent[u]:
            self.parent[u] = self.find(self.parent[u])  # Path compression
        return self.parent[u]
    
    def union(self, u, v):
        pu, pv = self.find(u), self.find(v)
        if pu == pv: return False
        if self.size[pu] < self.size[pv]:  # Merge pu to pv
            self.size[pv] += self.size[pu]
            self.parent[pu] = pv
        else:
            self.size[pu] += self.size[pv]
            self.parent[pv] = pu
        return True

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        DIR = [0, 1, 0, -1, 0]
        m, n = len(grid), len(grid[0])
        uf = UnionFind(m*n)
        
        component = 0
        for r in range(m):
            for c in range(n):
                if grid[r][c] == "0": continue
                component += 1
                curId = r * n + c
                for i in range(4):
                    nr, nc = r + DIR[i], c + DIR[i+1]
                    if nr < 0 or nr == m or nc < 0 or nc == n or grid[nr][nc] == "0": continue
                    neiId = nr * n + nc
                    if uf.union(curId, neiId):
                        component -= 1
        return component

# Complexity

# Time: O(MN * α(MN)), where M <= 300 is number of rows, N <= 300 is number of columns in the matrix.
# Explanation: Using both path compression and union by size ensures that the amortized time per UnionFind operation is only α(n), which is optimal, where α(n) is the inverse Ackermann function. This function has a value α(n) < 5 for any value of n that can be written in this physical universe, so the disjoint-set operations take place in essentially constant time.
# Reference: https://en.wikipedia.org/wiki/Disjoint-set_data_structure or https://www.slideshare.net/WeiLi73/time-complexity-of-union-find-55858534 for more information.
# Space: O(M*N)