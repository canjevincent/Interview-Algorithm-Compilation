# --GRAPH--

# Alien Dictionary ( PREMIUM )
# Link : https://github.com/learlinian/Python-Leetcode-Solution/blob/master/269.Alien%20Dictionary.py
# Youtube: https://www.youtube.com/watch?v=6kTZYvNNyps 

# There is a new alien language that uses the English alphabet. However, the order among the letter is unknow to you.

# You are given a list of strings words from the alien language's dictionary. where the strings in words are sorted lexicographically by the rules of this new language.

# Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. if there is no solution, return "".
# If there are multiple solutions, return any of them.

# A string s is lexicographically smaller than a string t if at the first letter where they differ, the letter in s comes before the letter in t in the alien language. if the first min(s.length, t.length)
# letters are the same, then s is smaller if and only if s.length < t.length

# Example 1:

Input: words = ["wrt","wrf","er","ett","rftt"]
Output: "wertf"

# SOLUTION 1

def Solution(words):
    records = []
    for i in range(len(words)-1):
        for j in range(min(len(words[i]), len(words[i+1]))):
            if words[i][j] == words[i+1][j]:
                continue
            records.append([words[i][j], words[i+1][j]])
            break

    # invalid words
    if not records:
        return []

    characters = set()
    for word in words:
        characters.update(word)
    # characters = list(characters)
    
    # Bubble sorting -- time complexity: O(n^2)
    # last_character = []
    # while last_character != characters:
    #     last_character = characters.copy()
    #
    #     for record in records:
    #         first_index = characters.index(record[0])
    #         second_index = characters.index(record[1])
    #         if first_index > second_index:
    #             characters[first_index], characters[second_index] = characters[second_index], characters[first_index]

    # Topological sort -- time complexity: O(n^2)
    overlapped_char = set(i[0] for i in records)  # all characters appear in the words
    missing_key = (characters - overlapped_char).pop()
    all_char = len(characters)
    characters = [missing_key]

    while len(characters) < all_char:
        for record in records:
            if record[1] == characters[0]:
                characters = [record[0]] + characters

    return characters


if __name__ == '__main__':
    words = ["wrt","wrf","er","ett","rftt"]
    print(Solution(words))

# SOLUTION 2

class Solution:
  def alienOrder(self, words: List[str]) -> str:
    adj = { c:set() for w in words for c in w }

    for i in range(len(words) - 1):
      w1, w2 = words[i], words[i + 1]
      minLen = min(len(w1),len(w2))
      if len(w1) > len(w2) and w1[:minLen] == w2[:minLen]:
        return ""
      
      for j in range(minLen):
        if w1[j] != w2[j]:
          adj[w1[j]].add(w2[j])
          break

    visit = {} # False=visited, True=current path
    res = []

    def dfs(c):
      if c in visit:
        return visit[c]

      visit[c] = True
      for nei in adj[c]:
        if dfs(nei):
          return True
      
      visit[c] = False
      res.append(c)
    
    for c in adj:
      if dfs(c):
        return ""
    
    res.reverse()
    return "".join(res)