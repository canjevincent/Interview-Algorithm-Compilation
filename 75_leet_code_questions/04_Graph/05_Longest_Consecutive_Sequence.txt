# --GRAPH--

# Longest Consecutive Sequence
# Link : 

# Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

# You must write an algorithm that runs in O(n) time.

# Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

# Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Constraints:

0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9

# Simple O(n) with Explanation - Just walk each streak

# First turn the input into a set of numbers. That takes O(n) and then we can ask in O(1) whether we have a certain number.

# Then go through the numbers. If the number x is the start of a streak (i.e., x-1 is not in the set), then test y = x+1, x+2, x+3, ... and stop at the first number y not in the set. 
# The length of the streak is then simply y-x and we update our global best with that. Since we check each streak only once, this is overall O(n). This ran in 44 ms on the OJ, one of the fastest Python submissions.

def longestConsecutive(self, nums):
    nums = set(nums)
    best = 0
    for x in nums:
        if x - 1 not in nums:
            y = x + 1
            while y in nums:
                y += 1
            best = max(best, y - x)
    return best

✅ Short & Easy Solution w/ Explanation | O(N) Solution with comments using hashset

✔️ Solution - I (Sorting)

# We can simply sort the given array and compare consecutive elements. Following cases exists:

# nums[i] == nums[i-1] + 1: This means the current element is consecutive to previous, so increment current streak count.
# nums[i] == nums[i-1]: We have found the same element as previous. Skip it, and see if we can still extend the sequence with next elements.
# None of above : We can't extend the sequence any further. Update longest to store longest formed streak till now and reset curlongest.

def longestConsecutive(self, nums: List[int]) -> int:
	nums.sort()
	longest, cur_longest = 0, min(1, len(nums))
	for i in range(1,len(nums)):
		if nums[i] == nums[i - 1] : continue
		if nums[i] == nums[i - 1] + 1: cur_longest += 1
		else: longest, cur_longest = max(longest, cur_longest), 1
	return max(longest, cur_longest)

# Time Complexity : O(NlogN), where N is the number of elements in nums
# Time Complexity : O(1), ignoring the space required by sorting algorithm.

✔️ Solution - II (Using Hashset)

# We need to find the longest consecutive sequence in linear time. We can do this if we insert all the elements of nums into a hashset. 
# Once we have inserted all the elements, we can just iterate over the hashset to find longest consecutive sequence involving the current element(let's call it num) under iteration. 
# This can simply be done by iterating over elements that are consecutive to num till we keep finding them in the set. Each time we will also delete those elements from set to ensure we only visit them once.

def longestConsecutive(self, nums: List[int]) -> int:
	longest, s = 0, set(nums)
	for num in nums:
		cur_longest, j = 1, 1
		while num - j in s: 
			s.remove(num - j)
			cur_longest, j = cur_longest + 1, j + 1
		j = 1
		while num + j in s: 
			s.remove(num + j)
			cur_longest, j = cur_longest + 1, j + 1
		longest = max(longest, cur_longest)
	return longest

# Time Complexity : O(N)
# Space Complexity : O(N)

✔️ Solution - III (Using Hashset - w/ optimizations)

# We can form a solution without the need to spend time erasing elements from the hashset.

# Instead of taking the first element that we find in the hashset and iterating both forward and backward, we can just keep skipping till we find that hashset contains num - 1. Finally, we can just iterate in the forward direction 
# till we find consecutive elements in hashset and update longest at the end

def longestConsecutive(self, nums):
	s, longest = set(nums), 0
	for num in s:
		if num - 1 in s: continue
		j = 1
		while num + j in s: j += 1
		longest = max(longest, j)
	return longest

# Time Complexity : O(N)
# Space Complexity : O(N)