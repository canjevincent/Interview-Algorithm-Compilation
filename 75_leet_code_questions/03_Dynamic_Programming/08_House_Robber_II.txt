# --DYNAMIC PROGRAMMING--

# House Robber
# Link : https://leetcode.com/problems/house-robber-ii/solutions/299071/python-o-n-time-o-1-space/

# You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. 
# That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

# Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

# Example 1:

Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

# Example 2:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

# Example 3:

Input: nums = [1,2,3]
Output: 3
 

# Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 1000

# Notice that the first house and the last house can not be both robbed, so we have rob(nums) = max(rob(nums[1:], nums[:-1]). Since there are no circles in both nums[1:] and nums[:-1], we can simply apply the answers from House Rob. 
# https://leetcode.com/problems/house-robber/discuss/299056/Python-O(n)-time-O(1)-space-4-lines

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        def simple_rob(nums):
            rob, not_rob = 0, 0
            for num in nums:
                rob, not_rob = not_rob + num, max(rob, not_rob)
            return max(rob, not_rob)
        
        if not nums:
            return 0
        elif len(nums) == 1:
            return nums[0]
        else:
            return max(simple_rob(nums[1:]), simple_rob(nums[:-1]))

# Slicing a list is actually O(n) space in Python (thanks post2web for pointing out). In our case, nums[1:], nums[:-1] create copies, to avoid this, we can pass indices into the simple_rob function instead of sliced lists. 
# Below is the less elegant, but true O(1) space solution:

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        def simple_rob(nums, i, j):
            rob, not_rob = 0, 0
            for idx in range(i, j):
                num = nums[idx]
                rob, not_rob = not_rob + num, max(rob, not_rob)
            return max(rob, not_rob)
        
        if not nums:
            return 0
        elif len(nums) == 1:
            return nums[0]
        else:
            n = len(nums)
            return max(simple_rob(nums, 1, n), simple_rob(nums, 0, n-1))


# [Python] Explanation with Very simple DP solution

class Solution:
    def rob(self, nums: List[int]) -> int:
        ## RC ##
        ## APPROACH : DP ##
        ## LOGIC ##
        ## 1. Only 2 scenarios possible 
        ##     a) Rob 1st and donot rob last 
        ##     b) Rob last and donot rob first. 
        ## We take maximum of both cases.
        
        
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##
        
        def house_robber(nums):
            dp = [0] * len(nums)
            dp[0] = nums[0]
            dp[1] = max(nums[0], nums[1])
            for i in range(2,len(nums)):
                dp[i] = max(dp[i-1], nums[i]+dp[i-2])
            return max(dp[-1], dp[-2])
        
        if len(nums) <=2 : return max([0] + nums)
        return max( house_robber(nums[1:]), house_robber(nums[:-1]) )

# Python Very Simple and Clean DP Solution - faster than 97%

class Solution:
    def rob(self, nums: List[int]) -> int:
        def houseRobber(nums):
            # dynamic programming - decide each problem by its sub-problems:
            dp = [0]*len(nums)
            dp[0] = nums[0]
            dp[1] = max(nums[0], nums[1])
            for i in range(2, len(nums)):
                dp[i] = max(dp[i-1], nums[i]+dp[i-2])

            return dp[-1]
        
        # edge cases:
        if len(nums) == 0: return 0
        if len(nums) == 1: return nums[0]
        if len(nums) == 2: return max(nums)
        
        # either use first house and can't use last or last and not first:
        return max(houseRobber(nums[:-1]), houseRobber(nums[1:]))