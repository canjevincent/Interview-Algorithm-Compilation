# --DYNAMIC PROGRAMMING--

# Combination Sum IV
# Link : https://leetcode.com/problems/combination-sum-iv/solutions/2381090/python-easily-understood-dp-faster-than-92-simple/

# Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

# The test cases are generated so that the answer can fit in a 32-bit integer.

 

# Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

# Note that different sequences are counted as different combinations.
# Example 2:

Input: nums = [9], target = 3
Output: 0
 

# Constraints:

# 1 <= nums.length <= 200
# 1 <= nums[i] <= 1000
# All the elements of nums are unique.
# 1 <= target <= 1000
 

# Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?

# Case 1: target is small

# If we want to find the combination of target made from nums, we can just find
# sum(target - nums[1] , target - nums[2], ..., target - nums[n-1]) where n = len(nums)

# Thus, the easier method is to create a list dp with length equals to target + 1.
# And using for loop to calculate dp[x] += dp[x -nums[i]] until x = target.
# Then, the last loop should be dp[target] += dp[taget-nums[i]]

class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target+1)
        dp[0] = 1
        for i in range(1, target+1):
            for num in nums: 
                num_before = i - num
                if num_before >= 0:
                    dp[i] += dp[num_before]
        return dp[target]

# Case 2: target is large

# This method is similar to case 1, we start at target but not 0.
# SInce target could be very large, the time and space complexities are high if we create a large dp[]
# Thus, we use dict and recursion to solve the problem.

# Just like case 1, we know that target = sum(target - nums[1] , target - nums[2], ..., target - nums[n-1])
# Then, we can use a recursive function to calculate this:
# target = search(target - nums[1]) + search(target - nums[2]) + ... + search(target - nums[n-1])

class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = {}
        dp[0] = [1]

        def search(target):
            if target in dp:
                return dp[target]
            comb_sum = 0
            for num in nums:
                if target > num:
                    comb_sum += search(target - num)
                elif target == num:
                    comb_sum += 1
            dp[target] = comb_sum
            return comb_sum

        return search(target)

# Let n be target and m be the length of nums.
# Time complexity: O(n * m)
# Space complexity: O(n)