# --INTERVAL--

# Insert Interval
# Link : https://leetcode.com/problems/insert-interval/solutions/3056954/c-java-python-short-crisp-approach/

# You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. 
# You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

# Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

# Return intervals after the insertion.

# Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

# Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].


# Constraints:

# 0 <= intervals.length <= 104
# intervals[i].length == 2
# 0 <= starti <= endi <= 105
# intervals is sorted by starti in ascending order.
# newInterval.length == 2
# 0 <= start <= end <= 105


# [Python] O(n) solution, explained

# I am not sure, why this problem is marked as hard, because we do not use any smart ideas to solve it: just do what is asked: traverse our intervals and merge them. 
# Let us consider the case: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] and go through our code:

# Interval [1,2] is before [4,8], that is y < I[0], so we just add it to our res.
# Interval [3,5] is not before [4,8] but not after also, so it is the third case and we need to update I: I = [3,8] now.
# Interval [6,7]: the same logic, update I = [3,8] now (it did not change though)
# Interval [8,10]: still condition number 3, so I = [3,10] now.
# Interval [12,16]: it is after our I, so this is condition number 2 and we break from our loop: i = 3 now.
# Outside loop we combine res = [1,2], I = [3,10] and intervals[4:] = [12,16].
# Why we use i -= 1 inside our loop, before break? It can happen, that we did not visit this part and it means, that our suffix intervals[i+1:] should be empty.

# Complexity: time complexity is O(n), space complexity is O(n) as well and additional space complexity (if we do not count our output) is O(1).

# Note: that intstead of traversing our intervals with linear search, we can use binary search, however it will not reduce the overall complexity of algorithm, our result will have in average O(n) elements.

class Solution:
    def insert(self, intervals, I):
        res, i = [], -1
        for i, (x, y) in enumerate(intervals):
            if y < I[0]:
                res.append([x, y])
            elif I[1] < x:
                i -= 1
                break
            else:
                I[0] = min(I[0], x)
                I[1] = max(I[1], y)
                
        return res + [I] + intervals[i+1:]

# Python Super Short, Simple & Clean Solution 99% faster

# the main idea is that when iterating over the intervals there are three cases:

# the new interval is in the range of the other interval
# the new interval's range is before the other
# the new interval is after the range of other interval

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        result = []
        
        for interval in intervals:
			# the new interval is after the range of other interval, so we can leave the current interval baecause the new one does not overlap with it
            if interval[1] < newInterval[0]:
                result.append(interval)
            # the new interval's range is before the other, so we can add the new interval and update it to the current one
            elif interval[0] > newInterval[1]:
                result.append(newInterval)
                newInterval = interval
            # the new interval is in the range of the other interval, we have an overlap, so we must choose the min for start and max for end of interval 
            elif interval[1] >= newInterval[0] or interval[0] <= newInterval[1]:
                newInterval[0] = min(interval[0], newInterval[0])
                newInterval[1] = max(newInterval[1], interval[1])

        
        result.append(newInterval); 
        return result

# ðŸ”¥ [LeetCode The Hard Way] ðŸ”¥ Explained Line By Line

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        ans = []
        n = len(intervals)
        for i in range(n):
            if intervals[i][1] < newInterval[0]:
                # current interval starts first & not covered by newInterval, add intervals[i] to ans
                # [curInterval]
                #                      [newInterval]
                ans.append(intervals[i])
            elif intervals[i][0] > newInterval[1]:
                # newInterval starts first and not covered by current interval
                # Add newInterval to ans and set newInterval = curInterval
                #                       [curInterval]
                # [newInterval]
                ans.append(newInterval)
                newInterval = intervals[i]
            elif intervals[i][1] >= newInterval[0] or intervals[i][0] <= newInterval[1]:
                # They are overlapped, merge them
                # [curInterval]
                #        [newInterval]
                # or
                # [newInterval]
                #        [curInterval]
                newInterval[0] = min(newInterval[0], intervals[i][0])
                newInterval[1] = max(newInterval[1], intervals[i][1])
        # add the last interval
        ans.append(newInterval) 
        return ans

# Short & Crisp Approach âœ…

# Approach:

# The approach used is to first iterate through the given intervals, and keeping track of the index of the interval where the new interval should be inserted such that the intervals remain sorted. 
# Then it will merge any overlapping intervals with the new interval and update its start and end times. Finally, it will insert the new interval into the correct position in the intervals and return the modified intervals.
# The key idea behind this approach is to maintain the sorted order of the intervals, and to merge any overlapping intervals with the new interval.
# By iterating through the intervals and keeping track of the index where the new interval should be inserted, we can ensure that the intervals remain sorted, and by merging any overlapping intervals with the new interval, 
# we can ensure that the final output has no overlapping intervals.

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        res = []
        i = 0
        n = len(intervals)
        while i < n and intervals[i][1] < newInterval[0]:
            res.append(intervals[i])
            i += 1
        while i < n and intervals[i][0] <= newInterval[1]:
            newInterval[0] = min(intervals[i][0], newInterval[0])
            newInterval[1] = max(intervals[i][1], newInterval[1])
            i += 1
        res.append(newInterval)
        while i < n:
            res.append(intervals[i])
            i += 1
        return res

# The Time complexity is O(n)
# The Space complexity is O(n) .