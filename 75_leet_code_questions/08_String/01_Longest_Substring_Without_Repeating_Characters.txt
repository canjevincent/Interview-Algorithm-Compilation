# --STRING--

# Longest Substring Without Repeating Characters
# Link : https://leetcode.com/problems/longest-substring-without-repeating-characters/

# Given a string s, find the length of the longest substring without repeating characters.

# Example 1:

# Input: s = "abcabcbb"
# Output: 3
# Explanation: The answer is "abc", with the length of 3.
# Example 2:

# Input: s = "bbbbb"
# Output: 1
# Explanation: The answer is "b", with the length of 1.
# Example 3:

# Input: s = "pwwkew"
# Output: 3
# Explanation: The answer is "wke", with the length of 3.
# Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

# Constraints:

# 0 <= s.length <= 5 * 10^4
# s consists of English letters, digits, symbols and spaces.

# Solutioin 1 - [Python3]: sliding window O(N) with explanation

Sliding window
We use a dictionary to store the character as the key, the last appear index has been seen so far as value.
seen[charactor] = index

move the pointer when you met a repeated character in your window.

# indext    0    1    2    3   4   5   6   7
# string    a    c    b    d   b   a   c   d
#           ^                  ^
#           |                  |
# 		left               right
# 		seen = {a : 0, c : 1, b : 2, d: 3} 
# 		# case 1: seen[b] = 2, current window  is s[0:4] , 
# 		#        b is inside current window, seen[b] = 2 > left = 0. Move left pointer to seen[b] + 1 = 3
# 		seen = {a : 0, c : 1, b : 4, d: 3} 
# indext    0    1    2    3   4   5   6   7
# string    a    c    b    d   b   a   c   d
# 						 ^   ^
# 					     |   |
# 				      left  right		
# indext    0    1    2    3   4   5   6   7
# string    a    c    b    d   b   a   c   d
# 					     ^       ^
# 					     |       |
# 				       left    right		
# 		# case 2: seen[a] = 0,which means a not in current window s[3:5] , since seen[a] = 0 < left = 3 
# 		# we can keep moving right pointer.

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        seen = {}
        l = 0
        output = 0
        for r in range(len(s)):
            """
            If s[r] not in seen, we can keep increasing the window size by moving right pointer
            """
            if s[r] not in seen:
                output = max(output,r-l+1)
            """
            There are two cases if s[r] in seen:
            case1: s[r] is inside the current window, we need to change the window by moving left pointer to seen[s[r]] + 1.
            case2: s[r] is not inside the current window, we can keep increase the window
            """
            else:
                if seen[s[r]] < l:
                    output = max(output,r-l+1)
                else:
                    l = seen[s[r]] + 1
            seen[s[r]] = r
        return output

# Time complexity :O(n).
# n is the length of the input string.
# It will iterate n times to get the result.

# Space complexity: O(m)
# m is the number of unique characters of the input.
# We need a dictionary to store unique characters.

# Solution 2 - A Python solution - 85ms - O(n)

class Solution:
    # @return an integer
    def lengthOfLongestSubstring(self, s):
        start = maxLength = 0
        usedChar = {}
        
        for i in range(len(s)):
            if s[i] in usedChar and start <= usedChar[s[i]]:
                start = usedChar[s[i]] + 1
            else:
                maxLength = max(maxLength, i - start + 1)

            usedChar[s[i]] = i

        return maxLength

# Solution 3 - âœ…3 Method's || PYTHON || Beginner FriendlyðŸ”¥ðŸ”¥ðŸ”¥

# Intuition
# The intuition behind the 3 solutions is to iteratively find the longest substring without repeating characters by maintaining a sliding window approach. We use two pointers (left and right) to represent the boundaries of the current substring. As we iterate through the string, we update the pointers and adjust the window to accommodate new unique characters and eliminate repeating characters.

# Approach 1 - Set
# We use a set (charSet) to keep track of unique characters in the current substring.
# We maintain two pointers, left and right, to represent the boundaries of the current substring.
# The maxLength variable keeps track of the length of the longest substring encountered so far.
# We iterate through the string using the right pointer.
# If the current character is not in the set (charSet), it means we have a new unique character.
# We insert the character into the set and update the maxLength if necessary.
# If the character is already present in the set, it indicates a repeating character within the current substring.
# In this case, we move the left pointer forward, removing characters from the set until the repeating character is no longer present.
# We insert the current character into the set and continue the iteration.
# Finally, we return the maxLength as the length of the longest substring without repeating characters.

# Code

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s)
        maxLength = 0
        charSet = set()
        left = 0
        
        for right in range(n):
            if s[right] not in charSet:
                charSet.add(s[right])
                maxLength = max(maxLength, right - left + 1)
            else:
                while s[right] in charSet:
                    charSet.remove(s[left])
                    left += 1
                charSet.add(s[right])
        
        return maxLength

# Approach 2 - Unordered Map
# We improve upon the first solution by using an unordered map (charMap) instead of a set.
# The map stores characters as keys and their indices as values.
# We still maintain the left and right pointers and the maxLength variable.
# We iterate through the string using the right pointer.
# If the current character is not in the map or its index is less than left, it means it is a new unique character.
# 6 We update the charMap with the character's index and update the maxLength if necessary.
# If the character is repeating within the current substring, we move the left pointer to the next position after the last occurrence of the character.
# We update the index of the current character in the charMap and continue the iteration.
# At the end, we return the maxLength as the length of the longest substring without repeating characters.

# Code

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s)
        maxLength = 0
        charMap = {}
        left = 0
        
        for right in range(n):
            if s[right] not in charMap or charMap[s[right]] < left:
                charMap[s[right]] = right
                maxLength = max(maxLength, right - left + 1)
            else:
                left = charMap[s[right]] + 1
                charMap[s[right]] = right
        
        return maxLength

# Approach 3 - Integer Array
# This solution uses an integer array charIndex to store the indices of characters.
# We eliminate the need for an unordered map by utilizing the array.
# The maxLength, left, and right pointers are still present.
# We iterate through the string using the right pointer.
# We check if the current character has occurred within the current substring by comparing its index in charIndex with left.
# If the character has occurred, we move the left pointer to the next position after the last occurrence of the character.
# We update the index of the current character in charIndex.
# At each step, we update the maxLength by calculating the length of the current substring.
# We continue the iteration until reaching the end of the string.
# Finally, we return the maxLength as the length of the longest substring without repeating characters.

Code

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s)
        maxLength = 0
        charIndex = [-1] * 128
        left = 0
        
        for right in range(n):
            if charIndex[ord(s[right])] >= left:
                left = charIndex[ord(s[right])] + 1
            charIndex[ord(s[right])] = right
            maxLength = max(maxLength, right - left + 1)
        
        return maxLength