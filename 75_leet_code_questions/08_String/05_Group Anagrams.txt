# --STRING--

# Group Anagrams
# Link : https://leetcode.com/problems/group-anagrams/

# Given an array of strings strs, group the anagrams together. You can return the answer in any order.

# An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

# Example 1:

# Input: strs = ["eat","tea","tan","ate","nat","bat"]
# Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
# Example 2:

# Input: strs = [""]
# Output: [[""]]
# Example 3:

# Input: strs = ["a"]
# Output: [["a"]]

# Constraints:

# 1 <= strs.length <= 10^4
# 0 <= strs[i].length <= 100
# strs[i] consists of lowercase English letters.

# Solution 1 - âœ…Beats 100% || PYTHON || Beginner FriendlyðŸ”¥ðŸ”¥ðŸ”¥

# Intuition:
# The intuition is to group words that are anagrams of each other together. Anagrams are words that have the same characters but in a different order.

# Explanation:
# Let's go through the code step by step using the example input ["eat","tea","tan","ate","nat","bat"] to understand how it works.

# Initializing Variables

# We start by initializing an empty unordered map called mp (short for map), which will store the groups of anagrams.
# Grouping Anagrams
# We iterate through each word in the input vector strs. Let's take the first word, "eat", as an example.

# Sorting the Word
# We create a string variable called word and assign it the value of the current word ("eat" in this case).

# Next, we sort the characters in word using the sort() function. After sorting, word becomes "aet".

# Grouping the Anagram
# We insert word as the key into the mp unordered map using mp[word], and we push the original word ("eat") into the vector associated with that key using mp[word].push_back(x), where x is the current word.

# Since "aet" is a unique sorted representation of all the anagrams, it serves as the key in the mp map, and the associated vector holds all the anagrams.

# For the given example, the mp map would look like this after processing all the words:

{
  "aet": ["eat", "tea", "ate"],
  "ant": ["tan", "nat"],
  "abt": ["bat"]
}

# Creating the Result
# We initialize an empty vector called ans (short for answer) to store the final result.

# We iterate through each key-value pair in the mp map using a range-based for loop. For each pair, we push the vector of anagrams (x.second) into the ans vector.
# For the given example, the ans vector would look like this:

[
  ["eat", "tea", "ate"],
  ["tan", "nat"],
  ["bat"]
]

# Returning the Result
# We return the ans vector, which contains the groups of anagrams.

Code

class Solution:
    def groupAnagrams(self, strs):
        anagram_map = defaultdict(list)
        
        for word in strs:
            sorted_word = ''.join(sorted(word))
            anagram_map[sorted_word].append(word)
        
        return list(anagram_map.values())

# Solution 2 - ðŸ”¥Python || Easily Understood âœ… || Hash Table || Fast || Simple

# Appreciate if you could upvote this solution

# Method: Hash Table

# Since the output needs to group the anagrams, it is suitable to use dict to store the different anagrams.
# Thus, we need to find a common key for those anagrams.
# And one of the best choices is the sorted string as all the anagrams have the same anagrams.

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        strs_table = {}

        for string in strs:
            sorted_string = ''.join(sorted(string))

            if sorted_string not in strs_table:
                strs_table[sorted_string] = []

            strs_table[sorted_string].append(string)

        return list(strs_table.values())

Time complexity: O(m*nlogn)
Space complexity: O(n)

# Solution 3 - Python 3 solution; detailed explanation; faster than 97.5%

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        h = {}
        for word in strs:
            sortedWord = ''.join(sorted(word))
            if sortedWord not in h:
                h[sortedWord] = [word]
            else:
                h[sortedWord].append(word)
        final = []
        for value in h.values():
            final.append(value)
        return final

# We recall that anagrams are strings which have identical counts of characters. So anagrams, when sorted, result in the same string. We take advantage of this last property.

# We create a dictionary and for each word in the input array, we add a key to the dictionary if the sorted version of the word doesn't already exist in the list of keys. The key then becomes the sorted version of the word, and the value for the key is an array that stores each anagram of the key. i.e. for every next word that is an anagram, we would sort the word, find the key that is equal to the sorted form, and add the original word to the list of values for the key.

# At the end of it, we just add every value in the dictionary to the final array.